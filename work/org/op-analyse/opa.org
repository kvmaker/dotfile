#+TITLE:     设备分析
#+AUTHOR:    yubo y00186361
#+EMAIL:     kvmaker.yubo@huawei.com
#+DATE:      Wed Jun  4 13:58:03 2014
#+LATEX_CLASS: cn-article
#+BEAMER_FRAME_LEVEL: 2
#+LaTeX_CLASS_OPTIONS: [xcolor=svgnames,bigger,presentation]
#+OPTIONS: LaTeX:dvipng

* 设备管理配置
** NTP
*** 介绍
- 定义：NTP用于在一系列分布式时间服务器与客户端之间同步时钟。
- 目的：NTP主要应用于网络中所有设备时钟需要保持一致的场合
  1. 网络管理
  2. 计费系统：要求所有设备的时钟保持一致。
  3. 多个系统协同处理同一个复杂事件：为保证正确的执行顺序，多个系统必须参考同一时钟。
  4. 备份服务器和客户机之间进行增量备份：要求备份服务器和所有客户机之间的时钟同步。
  5. 系统时间：某些应用程序需要知道用户登录系统的时间以及文件修改的时间。
- 版本
- 原理
  #+CAPTION: NTP原理
  #+ATTR_LATEX: width=.6\textwidth
  [[./fig/ntp0.png]]
  1. RouterA发送一个NTP报文给RouterB，该报文中带有它离开RouterA时的时间戳10:00:00a.m.（T1）。
  2. 此NTP报文到达RouterB时，RouterB加上到达时间戳11:00:01a.m.（T2）。
  3. 此NTP报文离开RouterB时，RouterB再加上离开时间戳11:00:02a.m.（T3）。
  4. RouterA接收到该响应报文时，加上新的时间戳10:00:03a.m.（T4）。
  5. 至此，RouterA获得了足够信息来计算以下两个重要参数：
     - NTP报文来回一个周期的时延：Delay= ( T4 - T1 ) - ( T3 – T2 )。
     - RouterA相对RouterB的时间差：Offset= ( ( T2- T1 ) + ( T3 – T4 ) ) / 2。
     - RouterA根据计算得到Delay为2秒，Offset为1小时。RouterA根据这些信息来设定自己的时
       钟，实现与RouterB的时钟同步。
- 网络结构
  #+CAPTION: NTP网络结构
  #+ATTR_LATEX: width=.6\textwidth
  [[./fig/ntp1.png]]
  1. 同步子网
  2. 主服务器
  3. 二级服务器
  4. 层数
- 工作模式
  1. 单播服务器/客户端模式
  2. 对等体模式
  3. 广播模式
  4. 组播模式
  5. 多播模式
- 访问控制
  1. 访问权限
  2. KOD
  3. 认证
*** 开源方案
- ntpdate
  手动同步系统时间
  #+begin_src sh
  # 同步华为内部时间服务器
  ntpdate szxntp01-in.huawei.com
  ntpdate szxntp02-in.huawei.com
  #+end_src
- ntpd
  ntpd配置
  #+begin_src sh
  /etc/ntp.conf

  # 同步服务器
  server szxntp01-in.huawei.com
  server szxntp02-in.huawei.com
  #+end_src
- ntp-keygen
  用于生成ntp需要的公钥和私钥
*** 结论
- 开源方案支持单播，广播，组播等工作模式。
- 开源方案支持访问控制。
- 开源方案支持NTP服务器和客户端。
- 开源方案支持基于共享密钥的安全和非对称密钥的安全。

* 接口管理配置
** Ethernet
- 公共(ifconfig)
  1. MAC
     #+begin_src sh
     ifconfig eth0 hw ether 00:00:00:00:00:01
	 #+end_src
  2. MTU
	 #+begin_src sh
     ifconfig eth0 mtu 1200
     #+end_src
- 私有
  1. 速率（10M，100M, 1000M）
  2. 模式（半双公， 全双工）
  3. Checksum Offload
  4. 流量控制
  5. 帧间隙
  6. 私有控制命令
  7. 出/入带宽利用率日志和告警阈值
  8. 端口隔离
  9. 配置环回检测
** Serial
- 物理属性(<termios.h>)
  1. 波特率
  2. 数据位
  3. 停止位
  4. 奇偶校验位
  5. 流控
- 链路层协议
  1. PPP(pppd, pppoe-server)
  2. HDLC, FR(sethdlc)
** CE1/PRI
- 历史
  - 20世纪60年代，随着PCM（Pulse Code Modulation）技术的出现，TDM（Time
    Division Multiplexing）技术在数字通信系统中逐渐得到广泛的应用。目前，在
    数字通信系统中存在两种时分复用系统，一种是ITU-T推荐的E1系统，广泛应用于
    欧洲以及中国；一种是由ANSI推荐的T1系统，主要应用于北美和日本（日本采用
    的J1，与T1基本相似，可以算作T1系统）。
- 物理属性
  1. 时钟模式(主，从)
  2. 帧格式（CRC4, 非CRC4）
  3. 线路空闲码（0x7e， 0xff）
  4. 帧间填充
- E1
  1. 数据带宽为2.048Mbit/s的接口
  2. 支持PPP, HDLC, FR
- CE1
  1. 2M的传输线路分成了32个64K的时隙
  2. 0号时隙由于传输同步信息
  3. 各个时隙对应一个接口
  4. 支持PPP, HDLC, FR
- PRI
  1. 2M的传输线路分成了32个64K的时隙
  2. 0号时隙由于传输同步信息
  3. 时隙16被作为D信道来传输信令
  4. 其它时隙与16好组合作为ISDN PRI使用
  5. 支持PPP, HDLC, FR
** 3G
- 使用数据卡
- 标准(WCDMA, CDMA2000)
- APN(Access Point Name)
  1. 单APN
  2. 多APN
- MTU
- PIN管理功能
** LTE
- 使用数据卡
** WLAN
- MAC
- 模式（802.1g, 802.11n, 802.11ac等）
- 频宽（40M, 20M）
- 工作频率(2.4G, 5G, 2.4G+5G)
- SSID
- Channel
** PON
- 光模块参数
- 认证(MAC, SN, LLID...)

** 其它
- CT1/PRI：T1系统的物理接口
- CE3: E3系统的物理接口
- E1-F: 简化版的CE1/PRI接口
- T1-F: 简化版的TE1/PRI接口
- ISDN BRI
- POS
- CPOS
- ADSL
- VDSL

** 逻辑接口
*** PPP（链路协议，L2TP, PPTP VPN）
   #+begin_src sh
   pppd nic-eth0 user xxx password xxx
   #+end_src
*** HDLC && FR
   #+begin_src sh
   sethdlc
   #+end_src
*** Tunnel
- IPv4 over IPv6, IPv6 over IPv4（IPv6过渡技术）
  #+begin_src sh
  ip -4 tunnel add sit
  ip -6 tunnel add 6rd
  #+end_src
- IPv4 over IPv4, IPv6 over IPv6（IPSec VPN）
  #+begin_src sh
  ip -4 tunnel add ipip
  ip -6 tunnel add ipip
  #+end_src
- GRE
  #+begin_src sh
  ip -4 tunnel add gre
  #+end_src
- VLAN
  #+begin_src sh
  vconfig add eth0 100
  vconfig set_egress_map eth0-100 3
  vconfig set_ingress_map eth0-100 2
  #+end_src
- Bridge
  #+begin_src sh
  brctl add br0
  brctl addif br0 lan0
  brctl addif br0 lan1
  #+end_src
- VXLAN
  #+begin_src sh
  ip link add vxlan0 type vxlan id 42 dev eth1
  #+end_src
*** VLAN
- PORT类型：access，trunk, hybrid
  Linux是trunk
- 隔离物理端口
  #+begin_src sh
  vconfig add eth0 100
  vconfig add eth1 100
  vconfig add eth2 200
  vconfig add eth3 200
  brctl addbr br0
  brctl addif br0 eth0.100 
  brctl addif br0 eth1.100
  brctl addbr br1
  brctl addif br1 eth2.200
  brctl addif br1 eth3.200
  #+end_src
- 实现不同VLAN的通讯
  #+begin_src sh
  ifconfig br0 10.0.0.0/24
  ifconfig br1 20.0.0.0/24
  #+end_src
- VLAN聚合
  Linux不支持
- QinQ
  不支持
  支持双层VLAN
- VLAN-Mapping
  不支持
- 考虑ovs
*** MPLS
- https://github.com/i-maravic/MPLS-Linux
- https://github.com/i-maravic/iproute2
- 独立的开发版本，实验性质的版本, 没有融入主分支。
- 没有LDP支持，所以只能支持静态LSP。
- 举例
  #+begin_src ditaa :file ./temp/mpls.png
    +--------+             +---------+             +---------+
    |        |             |         |             |         |
    | LER1   |  192.168.2.2|  LSR    |  192.168.3.3|  LER2   | 10.0.0.0/24
----+        +-------------+         +-------------+         +------------
    |        |    [200]    |         |    [300]    |         |           
    +--------+             +---------+             +---------+
  #+end_src
  
  #+begin_src sh
    LER1:    
    ip link add mpls1 type mpls push 200 192.168.2.2
    ip route add 10.0.0.0/24 dev mpls1
    LSR:
    ip route add 200 mpls swap 300 dev eth0 192.168.3.3
    LER2:
    ip route add 10.0.0.0/24 mpls pop
  #+end_src

* 以太网交换配置
** MAC表
*** 介绍
- MAC地址表
  1. 基于MAC地址转发
  2. MAC地址表分类：
	 - 动态地址表
     - 静态地址表
     - 黑洞表项
- 关闭学习MAC能力，限制MAC地址数
  由于MAC表的容量是有限的，当黑客伪造大量源MAC地址不同的报文并发送到设备后，设备
  上的MAC地址表项资源可能会被耗尽。此时即使它收到正常的报文，也无法学习到报文中
  的源MAC地。
  1. 基于VLAN或接口关闭学习MAC能力。
  2. 基于VLAN或接口进行MAC地址数限制。
- 端口安全
  端口安全（Port Security）功能将设备接口学习到的MAC地址变为安全MAC地址（包括安
  全动态MAC和Sticky MAC），可以阻止除安全MAC和静态MAC之外的主机通过本接口和设备
  通信，从而增强设备安全性。
  1. 安全动态MAC地址：使能端口安全而未使能Sticky MAC功能时学习到的MAC地址。缺省情况
     下，安全动态MAC地址不会被老化，设备重启后安全动态MAC地址会丢失，需要重新学习。
  2. Sticky MAC地址：使能端口安全后又使能Sticky MAC功能后学习到的MAC地址。Sticky MAC
	 地址不会被老化，保存配置后重启设备，Sticky MAC地址不会丢失，无需重新学习。
- MAC地址漂移
  #+CAPTION: MAC地址漂移
  #+ATTR_LaTeX: widht=.6\textwidth
  [[./fig/mac_table.png]]
  若SwitchB和SwitchC之间误接网线，则Router、SwitchB、SwitchC之间形成环路。当
  SwitchA上Port1接口从网络中收到一个广播报文后转发给Router，该报文经过环路，会被
  SwitchA上Port2接口收到。在接口Port2上配置MAC地址漂移检测，此时SwitchA会感知到
  MAC地址学习接口跳变的现象。若连续出现此现象，则在SwitchA上可以判断出现了MAC地
  址漂移。

** 以太网链路聚合
*** 介绍

* 广域网互联
** DCC
*** 介绍
- 定义：
  拨号控制中心DCC（Dial Control Center）是指路由器之间通过ISDN网络、3G网络等进行
  互联时或者路由器作为PPPoE/PPPoEoA/PPPoA Client与PPPoE/PPPoEoA/PPPoA Server之间
  互联时所采用的技术，DCC主要提供按需拨号服务。
- 目的：
  由于某些场合下，路由器之间仅在有数据需要传送时才建立连接并通信，传送的信息具有
  时间不相关性、突发性、总体数据量小等特点，DCC为此种应用提供了灵活、经济、高效
  的解决方案。
  实际应用中，DCC主要应用于以下两种场景：
  1. 以备份形式为干线通讯提供保障，在干线因为线路或其它原因出现故障而不能正常
     通信时，提供替代的辅助通路，确保业务正常进行。
  2. 当路由器作为PPPoE/PPPoEoA/PPPoA Client时，DCC通过按需拨号的功能，
	 为用户节省费用。
- 受益：DCC特性给企业用户带来了如下的受益。
  1. 费用的节省：路由器之间不预先建立连接，当它们之间有数据需要传送时才以拨号的方式建
	 立连接，当连接再次空闲，DCC会切断当前的连接，以节省用户的费用。
  2. 通讯保障：DCC作为干线备份为用户提供了通讯保障，在干线因为线路或其它原因出现故障
	 而不能正常通信时，提供替代的辅助通路，确保业务正常进行运转。
  3. 灵活的部属：共享DCC可以使物理接口根据连接选择不同的工作参数，从而实现一口多用。
- 应用场景
  1. 通过接口备份实现主干线路通信备份
	 #+CAPTION: DCC备份线路
	 #+ATTR_LaTeX: width=.6\textwidth
	 [[./fig/dcc0.png]]
  2. 当路由器作为PPPoE/PPPoEoA/PPPoA Client时，DCC通过按需拨号的功能，为用户节省
     费用
	 #+CAPTION: DCC按需拨号
	 #+ATTR_LaTeX: width=.6\textwidth
	 [[./fig/dcc1.png]]
- 开源方案
  无

*** 开源方案
- pppd
  #+begin_src sh
  # 设置ppp连接如果多长时间没有数据后，自动断开。
  pppd idle n
  #+end_src

** PPP
*** 介绍
- 定义：
  PPP（Point-to-Point Protocol）协议是一种点到点链路层协议，主要用于在全双工的同
  异步链路上进行点到点的数据传输。
- 优点
  1. 对物理层而言，PPP既支持同步链路又支持异步链路，而X.25、FR（Frame Relay）等
	 数据链路层协议仅支持同步链路，SLIP仅支持异步链路。
  2. PPP协议具有良好的扩展性，例如，当需要在以太网链路上承载PPP协议时，PPP可以
	 扩展为PPPoE。
  3. 提供LCP（Link Control Protocol）协议，用于各种链路层参数的协商。
  4. 提供各种NCP（Network Control Protocol）协议（如IPCP、IPXCP），用于各网络层
	 参数的协商，更好地支持了网络层协议。
  5. 提供认证协议CHAP（Challenge-Handshake Authentication Protocol）、
	 PAP（Password Authentication Protocol），更好的保证了网络的安全性。
  6. 无重传机制，网络开销小，速度快。
- 建链过程：
  #+CAPTION: PPP建链过程
  #+begin_src ditaa :file temp/ppp0.png
    +----------+          +-------------+        +---------------+
    |          |    UP    |             | OPENED |               |       
    | Dead     +--------->| Establish   +------->| Authenticate  +-------+
    +----------+          +-----+-------+        +------+--------+       |
         ^                      |                       |                |
         |       FAIL           |                       |                |
         |<---------------------+            FAIL       |            SUCC|
         |                            +-----------------+                |
         |                            |                                  |
         |     +--------------+       |      +----------------+          |
         |     |              |       v      |                |          |
         +-----+ Terminate    |<-------------+ Netowrk        |<---------+
         DOWN  +--------------+   CLOSING    +----------------+
  #+end_src
- 应用场景
  #+CAPTION: PPP应用场景
  #+ATTR_LaTeX: width=.6\textwidth
  [[./fig/ppp0.png]]
*** 开源方案
- pppd
  1. 介绍：
	 pppd配合Linux内核的ppp驱动完成，ppp链路的建立，维护PPP链路。
	 #+begin_src sh
     pppd [ options ]
	 #+end_src
  2. 选项
     |--------------------------+------------------------------------------|
     | 选项                     | 说明                                     |
     |--------------------------+------------------------------------------|
     | _ttyname_                | 使用串口设备与对端通讯                   |
     | _speed_                  | 串口设备的速率                           |
     | _asyncmp_                | 使用异步设备的时候，设置其不使用的控制字 |
     | *auth*                   | 使用认证                                 |
     | *call* _name_            | 从/etc/ppp/peer/ _name_ 读取options      |
     | *connect* _script_       | 建立PPP链接前，运行 _script_ 脚本        |
     | *defaultroute*           | 建立连接后，增加一条默认路由             |
     | *disconnect* _script_    | 端口PPP链接后，运行 _script_ 脚本        |
     | *escape* _xx,yy,..._     | 传输时需要忽略的字符                     |
     | *file* _name_            | 从文件 _name_ 获取options                |
     | *init* _script_          | 执行 _script_ 脚本去配置串口             |
     | *lock*                   | 创建一个lock文件来锁定串口               |
     | *mru* _n_                | 设置LCP协商的mru                         |
     | *mtu* _n_                | 设置LCP协商的mtu                         |
     | *passive*                | PPPD主动发起链接                         |
     |--------------------------+------------------------------------------|
     | _<rip>_ : _<lip>_        | 设置IPCP协商的IP地址                     |
     | *+ipv6*                  | 使能IPv6CP                               |
     | *ipv6* _<lid>_ , _<rid>_ | 设置IPv6CP协商的IP地址                   |
     | *allow-ip* _address_     | 使能对端使用这些IP而不需要认证           |
     | *basdcomp* _nr,nt_       | 使能BSD压缩策略                          |
     | *chap-interval* _n_      | 设置CHAP协议重认证间隔                   |
     | *idle* _n_               | 当链路空闲超过 _n_ 秒后主动断开链路      |
     | *ipcp-accept-local*      | 接收对端发送的LOCAL地址请求              |
     | *ipc-accept-remote*      | 接收对端发送的RMOTE（它自己）地址请求    |
     | *lcp-echo-interval* _n_  | 设置LCP-ECHO的时间间隔                   |
     | *mp*                     | 使能PPP多链路功能                        |
     | *noauth*                 | 不认证                                   |
     | *password* _pwd_         | 设置认证密码                             |
     | *pty* _script_           | 使用 _scrip_ 作为通讯设备                |
     | *user* _name_            | 设置认证用户名                           |
     |--------------------------+------------------------------------------|
  3. 选项文件：
	 在执行命令行选项前，首先从/etc/ppp/options, ~/.ppprc ,
     /etc/ppp/options.ttyname读取选项。
- pppoe
  1. 介绍：配合pppd，提供PPPoE客户端的介入功能。
	 #+begin_src sh
     pppd pty 'pppoe [pppoe_options]' [pppd_options]
     pppoe -A [pppoe_options]
	 #+end_src

	 #+CAPTION: PPPoE会话建立过程
	 #+ATTR_LaTeX: width=.6\textwidth
	 [[./fig/ppp1.png]]

  2. 选项
     |---------------------+----------------------------------|
     | 选项                | 说明                             |
     |---------------------+----------------------------------|
     | *-I* _interface_    | 设置使用的以太网设备             |
     | *-T* _timeout_      | 设值链路空闲多长时间后，自动断开 |
     | *-S* _service_name_ | 设置service name                 |
     | *-C* _ac_name_      | 设置ac name                      |
     | *-U*                | 使用host unqiue                  |
     |---------------------+----------------------------------|
- pppoe-server
  1. 介绍：配合pppd，完成PPPoE服务器功能
	 #+begin_src sh
     pppoe-server [options]
	 #+end_src
  2. 选项
     |------------------+----------------------------|
     | 选项             | 说明                       |
     |------------------+----------------------------|
     | *-F*             | 设置pppoe-server在前台运行 |
     | *-I* _interface_ | 设置运行在那个接口         |
     | *-C* _ac_name_   | 设置 ac_name               |
     | *-S* _name_      | 设置 server name           |
     | *-L* _ip_        | 设置本地IP地址             |
     | *-R* _ip_        | 设置远端IP地址             |
     |------------------+----------------------------|
	 
** ATM
** 帧中继
** HDLC
** IP-Trunk
** ISDN
** Moderm
** RTC
* IP业务
** IPv4基础
*** 介绍
- IPv4（Internet Protocol Version 4）协议族是TCP/IP协议族中最为核心的协议族。它工
  作在TCP/IP协议栈的网络层，该层与OSI参考模型的网络层相对应。网络层提供了无连接数
  据传输服务，即网络在发送分组时不需要先建立连接，每一个分组（也就是IP数据报文）独
  立发送，与前后的分组无关。
*** 开源方案
- ifconfig
  #+begin_src sh
  ifconfig eth0 192.168.0.100/24
  #+end_src
- iproute2
  #+begin_src sh
  ip -4 addr add 192.168.0.100/24 dev eth0
  #+end_src
** ARP
*** 介绍
- 定义
  - 地址解析协议ARP（Address Resolution Protocol）是用来将IP地址解析为MAC地址的
    协议。
- 目的
  - 在局域网中，当主机或其它网络设备有数据要发送给另一个主机或设备时，它必须知道对方
    的网络层地址（即IP地址）。但是仅有IP地址是不够的，因为IP数据报文必须封装成帧才能
    通过物理网络发送，因此发送方还必须有接收方的物理地址（MAC地址），所以需要一个从
    IP地址到物理地址的映射。ARP就是实现这个功能的协议。
- 基本原理
  #+CAPTION: ARP原理
  #+ATTR_LATEX: width=.6\textwidth
  [[./fig/arp0.png]]
  #+CAPTION: ARP原理
  #+ATTR_LATEX: width=.6\textwidth
  [[./fig/arp1.png]]
- Proxy ARP
  1. 路由式Proxy ARP: 使那些在同一网段却不在同一物理网络上的网络设备能够相互通信的一种功能。
     #+CAPTION: 路由Proxy ARP
     #+ATTR_LATEX: width=.6\textwidth
     [[./fig/proxy_arp0.png]]
  2. VLAN内Proxy ARP: 如果两个用户属于相同的VLAN，但VLAN内配置了用户隔离。此时用户间要互通，需要
     在关联了VLAN的接口上启动VLAN内Proxy ARP功能。
     #+CAPTION: VLAN内Proxy APR
     #+ATTR_LATEX: width=.6\textwidth
     [[./fig/proxy_arp1.png]]
  3. VLAN间Proxy ARP: 如果两个用户属于不同的VLAN，用户间要进行三层互通，可以在关
     联了VLAN的接口上启动VLAN间Proxy ARP功能。
     #+CAPTION: VLAN间Proxy ARP
     #+ATTR_LATEX: width=.6\textwidth
     [[./fig/proxy_arp2.png]]
- 免费ARP
  1. 主机主动使用自己的IP地址作为目标地址发送ARP请求。
  2. 作用：
	 - 检查重复的IP地址。
	 - 通告新的MAC地址。
	 - 在VRRP备份组中用来通告主备发生变换。
- ARP-Ping
  - ARP-Ping IP
  - ARP-Ping MAC
*** 开源方案
- 动态ARP
- 静态ARP
  #+begin_src sh
  # 添加表项
  ip -4 neigh add 192.168.1.1 00:00:00:00:00:01 dev eth0

  # 删除表项
  ip -4 neigh del 192.168.1.1 00:00:00:00:00:01 dev eth0

  # 查看表项
  ip -4 neigh show
  #+end_src
- ARP-Proxy
- ARP-Ping IP
  #+begin_src sh
  arping 192.168.1.1
  #+end_src
- ARP-Ping MAC
  不支持

** DHCP
*** 介绍
- 定义：动态主机配置协议DHCP（Dynamic Host Configuration Protocol）是一种用于集
  中对用户IP地址进行动态管理和配置的技术。
- 目的：
  1. DHCP实现了IP地址及网络配置参数的自动分配的功能。
  2. DHCP实现了IP地址及网络配置参数的自动分配的功能。
- 基本架构
  #+CAPTION: DHCP基本架构
  #+ATTR_LATEX: width=.6\textwidth
  [[./fig/dhcp0.png]]
  1. DHCP Client：DHCP客户端，通过与DHCP服务器进行报文交互，获取IP地址和其他网络
	 配置信息，完成自身的地址配置。在设备接口上配置DHCP Client功能，这样接口可以作为
	 DHCP Client，使用DHCP协议从DHCP Server动态获得IP地址等参数，方便用户配置，
	 也便于集中管理。
  2. DHCP Relay：DHCP中继，负责转发来自客户端方向或服务器方向的DHCP报文，协助
	 DHCP客户端和DHCP服务器完成地址配置功能。如果DHCP服务器和DHCP客户端不在同一
     个网段范围内，则需要通过DHCP中继来转发报文，这样可以避免在每个网段范围内都
	 部署DHCP服务器，既节省了成本，又便于进行集中管理。在DHCP基本协议架构中，
	 DHCP中继不是必须的角色。只有当DHCP客户端和DHCP服务器不在同一网段内，
	 才需要DHCP中继进行报文的转发。
  3. DHCP Server：DHCP服务器，负责处理来自客户端或中继的地址分配、地址续租、
	 地址释放等请求，为客户端分配IP地址和其他网络配置信息。
- 应用场景
  #+CAPTION: DHCP Server的典型组网应用
  #+ATTR_LATEX: width=.6\textwidth
  [[./fig/dhcp1.png]]

  #+CAPTION: DHCP Relay的典型组网应
  #+ATTR_LATEX: width=.6\textwidth
  [[./fig/dhcp2.png]]

  #+CAPTION: DHCP/BOOTP Client的典型组网应用
  #+ATTR_LATEX: width=.6\textwidth
  [[./fig/dhcp3.png]]

*** 开源方案
- http://www.isc.org/downloads/dhcp/
- dhclent
  1. 操作：启动时通过制定-4或-6来开启DHCPv4或DHCPv6。通过读取dhclient.conf
	 获取到需要启动dhcp clent的接口和参数。使用dhclient.lease来跟踪获取到的
	 IP地址。
  2. 命令行：当命令行没有指定接口名称，dhclient.conf中也没有指定是，dhclient
	 默认工作在所有接口上。
  3. 选项：
     |-----------------+------------------------------------------|
     | 选项            | 说明                                     |
     |-----------------+------------------------------------------|
     | -4              | 使用DHCPv4协议                           |
     | -6              | 使用DHCPv6协议                           |
     | -l              | 强制获取一次租期，如果失败返回2          |
     | -d              | 运行在前台                               |
     | -nw             | 成为一个daemon                           |
     | -q              | 静默模式，不输出任何信息。默认选项       |
     | -v              | 输出信息                                 |
     | -w              | 即使没有找到广播接口，也继续运行         |
     | -n              | 不要配置任务接口，与-w一起使用           |
     | -e              | 自定义环境变量                           |
     | -r              | 释放当前地址                             |
     | -x              | 退出dhcp clent                           |
     | -p port         | 使用udp端口port，默认使用68              |
     | -s server       | 指定DHCP Server地址                      |
     | -g relay        | 指定DHCP Realy地址                       |
     | --version       | 输出版本信息                             |
     | -cf confgi-file | 指定配置文件                             |
     | -lf lease-file  | 指定lease文件                            |
     | -pf pid-file    | 指定pid记录文件                          |
     | --no-pid        | 没有pid记录文件                          |
     | -sf script-file | 指定获取到租期后执行的脚本文件。默认使用 |
     |                 | BINDDIR/dhclient-script                  |
     |-----------------+------------------------------------------|
  4. dhclient.conf
     |----------------------------+----------------------------------------|
     | 选项                       | 说明                                   |
     |----------------------------+----------------------------------------|
     | *timout* _time_            | 设定超时时间。                         |
     | *retry* _time_             | 设定没有服务器时的重试次数。           |
     | *select-time* _time_       | 设定select时间。                       |
     | *reboot* _time_            | 设定reboot时间。                       |
     | *initital-interval* _time_ | 设定初始化间隔。                       |
     | *request* _option_ [, ...] | 设定客户端需要请求的option。           |
     | *require* _option_ [, ...] | 设定客户端需要请求的option，如果其中有 |
     |                            | option没有在offer中，则忽略此offer。   |
     | *send* _option_            | 设定客户端发送给服务器的option。       |
     |----------------------------+----------------------------------------|
	 #+begin_src sh
       timeout 300;
       retry 60;
       reboot 10;
       select-timeout 5;
       initial-interval 2;
       reject 192.33.137.209;

       interface "ep0" {
           send host-name "andare.fugue.com";
           send dhcp-client-identifier 1:0:a0:24:ab:fb:9c;
           send dhcp-lease-time 3600;
           supersede domain-search "fugue.com", "rc.vix.com", "home.vix.com";
           prepend domain-name-servers 127.0.0.1;
           request subnet-mask, broadcast-address, time-offset, routers,
                domain-name, domain-name-servers, host-name;
           require subnet-mask, domain-name-servers;
           script "CLIENTBINDIR/dhclient-script";
           media "media 10baseT/UTP", "media 10base2/BNC";
       }

       alias {
         interface "ep0";
         fixed-address 192.5.5.213;
         option subnet-mask 255.255.255.255;
       }
	 #+end_src
- dhcpd
- dhrelay
  
** DNS
*** 介绍
- 定义：
  域名系统DNS（Domain Name System）是一种用于TCP/IP应用程序的分布式数据库，
  提供域名与IP地址之间的转换服务。
- 作用：
  网络中的每台主机都是由IP地址来标识的，用户只有获得待访问主机的IP地址才能够
  成功实现访问操作。对于用户来讲，记住主机的IP地址是相当困难的，因此设计了一
  种字符串形式的主机命名机制，这些主机名与IP地址一一对应，这就是域名系统。域
  名系统解决了IP地址信息不便于记忆这一问题。用户进行访问网络主机操作时，可以
  直接使用便于记忆的、有意义的域名，由网络中的域名解析服务器将域名解析为正确
  的IP地址。
- 工作原理：
  DNS域名解析分为静态域名解析和动态域名解析，二者可以配合使用。在解析域名时，首
  先采用静态域名解析（查找静态域名解析表），如果静态域名解析不成功，再采用动态域
  名解析。由于动态域名解析可能会花费一定的时间，且需要域名服务器的配合，因而可以
  将一些常用的域名放入静态域名解析表中，这样可以大大提高域名解析效率。
  1. 静态DNS
  2. 动态DNS
	 #+CAPTION: 动态DNS
	 #+ATTR_LaTeX: width=.6\textwidth
	 [[./fig/dns0.png]]
  3. DDNS
	 - RFC2136定义的DDNS更新方式：设备作为DDNS客户端，动态更新DNS服务器中域名和
       IP地址的映射关系。
     - 通过DDNS服务器实现的更新方式：设备作为DDNS客户端，将域名与IP地址的映射
       关系发送给指定URL地址的DDNS服务器，然后DDNS服务器通知DNS服务器动态更新
       域名和IP地址之间的映射关系
	   #+CAPTION: 动态DNS
	   #+ATTR_LaTeX: width=.6\textwidth
       [[./fig/dns4.png]]
- DNS Proxy/Relay工作原理
  #+CAPTION: DNS Proxy工作原理
  #+ATTR_LaTeX: width=.6\textwidth
  [[./fig/dns1.png]]
  1. DNS Client将DNS请求报文发送给DNS Proxy，即请求报文的目的地址为DNS Proxy的IP地址。
  2. DNS Proxy收到请求报文后，首先查找本地的域名解析表，如果存在请求的信息，则DNS
  3. Proxy直接通过DNS应答报文将域名解析结果返回给DNS Client。
  4. 如果不存在请求的信息，则DNS Proxy将报文转发给DNS Server，通过DNS Server进行域名解析。
  5. DNS Proxy收到DNS Server的应答报文后，记录域名解析的结果，并将报文转发给DNS Client。
- 应用场景
  #+CAPTION: DNS Client场景
  #+ATTR_LaTeX: width=.6\textwidth
  [[./fig/dns2.png]]
  #+CAPTION: DNS Proxy场景
  #+ATTR_LaTeX: width=.6\textwidth
  [[./fig/dns3.png]]
*** 开源方案
- nslookup
  1. 作用：用于查询主机的IP地址
  2. 用法
   #+begin_src sh
   nslookup [-option] [name | -] [server]
   #+end_src
   当出现如下情况时，nslookup进入交互模式，交互模式下允许用户多次查询。
   #+begin_src sh
yubo@u1:~/work/org/op-analyse/fig$ nslookup
> www.baidu.com
Server:         10.72.55.81
Address:        10.72.55.81#53

Non-authoritative answer:
www.baidu.com   canonical name = www.a.shifen.com.
Name:   www.a.shifen.com
Address: 61.135.169.125
Name:   www.a.shifen.com
Address: 61.135.169.105
> www.huawei.com
Server:         10.72.55.81
Address:        10.72.55.81#53

Non-authoritative answer:
Name:   www.huawei.com
Address: 10.82.49.59
#+end_src
  3. 当没有给出参数时。
  4. 当第一个参数是-, 第二个参数是一个主机名或IP地址。
- /etc/resolv.conf
  1. 作用：主机的DNS解析配置
  2. 用法：
   |-------------------------------------+----------------------------------------------|
   | 选项                                | 说明                                         |
   |-------------------------------------+----------------------------------------------|
   | *nameserver* Name Server IP address | 服务器地址，可以配置多个，解析是顺序查找     |
   | *domain* Local domain name          | 配置域名称                                   |
   | *search* List for host-name         | 对于没有给出域的名称，一次使用List中的域查找 |
   |-------------------------------------+----------------------------------------------|
  3. 举例：
     #+begin_src sh
nameserver 10.72.55.81
nameserver 10.72.255.100
nameserver 10.98.48.39
search huawei.com
     #+end_src
- /etc/hosts
  1. 作用：配置静态解析地址
  2. 举例：
	 #+begin_src sh
127.0.0.1       localhost
127.0.1.1       u1
10.67.226.203   u0

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
	 #+end_src
- dnsmasq
  1. 作用：DNS缓存服务器。

** NAT
*** 介绍
- 定义：
  网络地址转换NAT（Network Address Translation）是将IP数据报报头中的IP地址
  转换为另一个IP地址的过程。
- 目的：
  随着Internet的发展和网络应用的增多，IPv4地址枯竭已成为制约网络发展的瓶颈。尽管
  IPv6可以从根本上解决IPv4地址空间不足问题，但目前众多网络设备和网络应用大多是基于
  IPv4的，因此在IPv6广泛应用之前，一些过渡技术（如CIDR、私网地址等）的使用是解决这
  个问题最主要的技术手段。NAT主要用于实现内部网络（简称内网，使用私有IP地址）访问
  外部网络（简称外网，使用公有IP地址）的功能。当内网的主机要访问外网时，通过NAT技
  术可以将其私网地址转换为公网地址，可以实现多个私网用户共用一个公网地址来访问外部
  网络，这样既可保证网络互通，又节省了公网地址。
- 概述：
  1. Basic NAT
	 #+CAPTION: Basic NAT
	 #+ATTR_LaTeX: width=.6\textwidth
	 [[./fig/nat0.png]]
  2. NAPT
	 #+CAPTION: NAPT
	 #+ATTR_LaTeX: width=.6\textwidth
	 [[./fig/nat1.png]]
- NAT ALG
  1. 说明：
  NAT和NAPT只能对IP报文的头部地址和TCP/UDP头部的端口信息进行转换。对于一些特殊协
  议，例如FTP等，它们报文的数据部分可能包含IP地址信息或者端口信息，这些内容不能
  被NAT有效的转换。解决这些特殊协议的NAT转换问题的方法就是在NAT实现中使用应用层
  网关ALG（Application Level Gateway）功能。ALG是对特定的应用层协议进行转换，在
  对这些特定的应用层协议进行NAT转换过程中，通过NAT的状态信息来改变封装在IP报文数
  据部分中的特定数据，最终使应用层协议可以跨越不同范围运行。
  1. 部分需要做ALG的协议
     |----------+----------------------------------------------------|
     | 应用协议 | 做NAT变换的字段                                    |
     |----------+----------------------------------------------------|
     | DNS      | 响应报文中的IP和Port                               |
     | FTP      | - Port请求报文中载荷里的IP和Port                   |
     |          | - Passive响应报文中载荷里的IP和Port                |
     | SIP      | - Request line                                     |
     |          | - From                                             |
     |          | - Via                                              |
     |          | - O                                                |
     |          | - Message body的C字段地址和M字段的端口             |
     | PPTP     | 分PPTP Client在私网还是PPTP Server在私网两种场景： |
     |          | - PPTP Client在私网，PPTP Server在公网时，         |
     |          |   仅对Client-Call-ID进行端口替换                   |
     |          | - PPTP Server在私网，PPTP Client在公网时，         |
     |          |   仅对Server-Call-ID进行端口替换                   |
     | RTSP     | setup/reply OK 报文中的端口字段                    |
     |----------+----------------------------------------------------|
- DNS Mapping
  #+CAPTION: DNS Mapping
  #+ATTR_LaTeX: width=.6\textwidth
  [[./fig/nat2.png]]
- NAT关联VPN
- 两次NAT
- NAT过滤和映射方式
- 典型应用
  - 私网主机访问公网
	#+CAPTION: 私网主机访问公网
	#+ATTR_LaTeX: width=.6\textwidth
	[[./fig/nat3.png]]
  - 公网主机访问私网
	#+CAPTION: 公网主机访问私网
	#+ATTR_LaTeX: width=.6\textwidth
	[[./fig/nat4.png]]
  - 私网主机通过域名访问公网
	#+CAPTION: 私网主机通过域名访问公网
	#+ATTR_LaTeX: width=.6\textwidth
	[[./fig/nat5.png]]
  - NAT多实例
	#+CAPTION: NAT多实例
	#+ATTR_LaTeX: width=.6\textwidth
	[[./fig/nat6.png]]
*** 开源方案
- Netfilter
  Linux内核态实现的状态防火墙，其中包括NAT功能。
- iptables
  用户态配置防火墙的工具。
  - SNAT
	#+CAPTION: SNAT
	#+ATTR_LaTeX: width = .6\textwidth
	#+begin_src ditaa :file temp/nat7.png
  +-----+              +------+
  |     |     LAN      |      | WAN
  |Host +------------->|Router+------>
  +-----+  10.0.0.0/24 +------+ 192.168.1.1                
  10.0.0.1             
	#+end_src
	#+begin_src sh
    iptables -t nat -A POSTROUTING -s 10.0.0.0/24 -j SNAT --to 192.168.1.1
	#+end_src
  - DNAT
	#+CAPTION: DNAT
	#+ATTR_LaTeX: width=.6\textwidth
	#+begin_src ditaa :file temp/nat8.png
  +-----+              +------+
  |     |      LAN     |      | WAN
  |Host |<-------------+Router|<-----
  +-----+  10.0.0.0/24 +------+ 192.168.1.1:8080
  10.0.0.1:8080                
	#+end_src
	#+begin_src sh
    iptables -t nat -A PREROUTING -p tcp -d 192.168.1.1:8080 --dport 8080 -j DNAT --to 10.0.0.1:8080
	#+end_src
- ALG
  - Netifiler的ALG: tftp, ftp, sip, h232, gre, ipsec, pptp, dccp, sctp

** TODO UDP Helper
*** 介绍
- 背景：网络中的主机有时需要向服务器发送UDP广播报文，用以获取网络配置或解析网络
  主机名等。但是，如果主机和服务器不在同一个广播域时，无法利用UDP广播报文进行通
  信，主机就无法从服务器获取所需要的信息。
  为解决上述问题，路由器提供了UDP Helper功能。通过该功能可以对目的端口为指定端口的
  UDP广播报文进行中继转发，将广播报文转换为单播报文发送给指定的目的服务器。	
*** 开源方案
	
** IP性能
*** 介绍
    |------------------------------------+----------|
    | 参数                               | 缺省配置 |
    |------------------------------------+----------|
    | IP源地址校验功能                   | 未使能   |
    | 出接口IP报文强制分片功能           | 未使能   |
    | ping快回功能                       | 使能     |
    | 业务接口板丢弃TTL=1的ICMP报文功能  | 未使能   |
    | 业务接口板丢弃带选项的ICMP报文功能 | 未使能   |
    | 丢弃目的不可达ICMP报文功能         | 未使能   |
    | SYN-Wait定时器                     | 75秒     |
    | FIN-Wait定时器                     | 675秒    |
    | TCP window-size                    | 8k字节   |
    |------------------------------------+----------|
*** 开源方案
** IPv6基础
   参考IPv4地址配置
** DHCPv6
   参考DHCP配置
** IPv6 DNS
   参考DNS配置
** IPv6 over IPv4隧道
   参考逻辑接口配置
** IPv4 over IPv6隧道
   参考逻辑接口配置
   
* TODO IP单播路由配置
* TODO IP组播配置
* TODO MPLS配置
* TODO VPN配置
* TODO WLAN-FAT AP配置
* TODO WLAN-AC配置
* TODO 语音配置
* TODO 可靠性配置
* TODO 安全配置
* TODO QoS配置
* TODO 网络管理和监控
* TODO 设备虚拟化
* TODO 数据中心特性
* TODO Smart Link & Monitor Link
* 参考
- 《AR150&160&200&1200&2200&3200 产品文档》
- Linux Manual: ntpd(8)
- Linux Manual: ntp.conf(5)
- Linux Manual: ntpdate(8)
- Linux Manual: ntp-keygen(8)
- Linux Manual: TERMIOS(3)
- Linux-kernel-3.8/Documentation/networking/generic-ppp.txt
- Linux-kernel-3.8/Documentation/networking/generic-hdlc.txt
- Linux-kernel-3.8/Documentation/networking/vxlan.txt
- Linux Manual: dhclient(8)
- Linux Manual: dhclient.conf(8)
- Linux Manual: nskookup(8)
- Linux Manual: resolv.conf(5)
- Linux Manual: hosts(5)
- Linux Manual: dnsmasq(8)
- Linux Manual: iptables(8)
- Linux Manual: pppd(8)
- Linux Manual: pppoe(8)
- Linux Manual: pppoe-server(8)
