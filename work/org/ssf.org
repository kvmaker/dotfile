* SSFv2.0开发 [40%]
** DONE 优化BASIC [100%]
   CLOSED: [2014-01-09 四 08:18] DEADLINE: <2014-01-08 三> SCHEDULED: <2014-01-07 二>
1. [X] 删除log和cmdtype相关文件
   1) include/
      1) common/
   	     1) hi_cmdtype.h: 由IPC代替
  	     2) hi_comdef.h:  y
	     3) hi_errdef.h:  y
	     4) hi_linux.h    y
	     5) hi_list.h:    y
	     6) hi_logdef.h:  由LOG代替
		 7) hi_netdef.h:  y
		 8) hi_print.h:   y
	     9) hi_stdio.h:   y
		 10) hi_sysdef.h: y
		 11) hi_typedef.h:y
	  2) hi_kspace.h:     删除hi_cmdtype.h
	  3) hi_uspace.h:     删除hi_cmdtype.h
   2) k_space/
      1) include/(参考source/)
		 1) hi_kernel_basic.h:    删除hi_kernel_dev.h,hi_kernel_hlp.h
	  2) source/
		 1) hi_kernel_configer.c: y
		 2) hi_kernel_dev.c:      由IPC代替
		 3) hi_kernel_hash.c:     y
		 4) hi_kernel_hlp.c:      由IPC代替
		 5) hi_kernel_kbasic.c:   需要修改
		 6) hi_kernel_log.c:      由LOG代替
		 7) hi_kernel_netlink.c:  y
		 8) hi_kernel_notifier.c: y
		 9) hi_kernel_os.c:       y
		 10) hi_kernel_os_crc.c   y
		 11) hi_kernel_queue.c    y
   3) u_space/
	  1) include/(参考source/)
		 1) hi_basic.h: 删除ifm,klog,rpc
	  2) source/
		 1) cli/:  由hi_ipc代替
		 2) ifm/： 有IPC代替
		 3) klog/: 由LOG代替
		 4) log/： 由LOG代替
		 5) rpc/： 由IPC代替
		 6) uos：  y
		 7) util:  将ssf中的util转移到此
2. [X] 将LOG划分为机制和控制部分 [100%]
   1) [X] 机制部分在BASIC中
   2) [X] 控制部分在APPS中
3. [X] 将BASIC集成到SSF中(单独将BASIC放入到外面，因为部分模块可能只依赖于BASIC)

** DONE 合入IPC & LOG修改
   CLOSED: [2014-02-28 五 09:51] DEADLINE: <2014-01-14 二> SCHEDULED: <2014-01-13 一>
*** BASIC & SSF修改
**** 删除文件 [3/3]
1. [X] hsan/source/basic
   1. [X] cil
   2. [X] include/common/hi_cmdtype.h
   3. [X] k_space/include/hi_kernel_dev.h
   4. [X] k_space/include/hi_kernel_hlp.h
   5. [X] k_space/source/hi_kernel_dev.h
   6. [X] k_space/source/hi_kernel_hlp.h
   7. [X] u_space/include/hi_cli.h
   8. [X] u_space/include/hi_ifm.h
   9. [X] u_space/include/hi_rpc.h
   10. [X] u_space/source/cli
   11. [X] u_space/source/ifm
   12. [X] u_space/source/klog
   13. [X] u_space/source/log/hi_log_srv.c
   14. [X] u_space/source/rpc
2. [X] hsan/source/cms
   1. [X] cmds
   2. [X] system
3. [X] hsan/source/ssf
   1. [X] db
   2. [X] log
   3. [X] util

**** 新增文件 [4/4]
1. [X] hsan/source/apps
   1. [X] log_cmd
2. [X] hsan/source/basic
   1. [X] u_space/include/util
   2. [X] u_space/source/util
3. [X] hsan/source/ssf
   1. [X] ipc/cmd
   2. [X] ipc/drv
   3. [X] include/hi_kernel_ipc.h
   4. [X] source/hi_ipc_sys.c
   5. [X] source/hi_ipc_sys.h
4. [X] test/ssf
   1. [X] ipc/cli
   2. [X] ipc2

**** 修改文件 [6/6]
1. [X] hsan/source/apps
2. [X] hsan/source/basic
3. [X] hsan/source/ssf
4. [X] hsan/test/ssf
5. [X] configs
6. [X] script/rootfs/etc
   1. [X] appm/gpon.json
   2. [X] appm/epon.json
   3. [X] appm/gpon4.json
   4. [X] appm/epon4.json
   5. [X] rc.d/S20_start

**** 新增需求 [7/7]
1. [X] 解决IPC的MAC输入问题
2. [X] 支持binary类型，使用uchar[]代替
3. [X] 支持数组的默认值简化输入
4. [X] 支持多functionname
5. [X] 支持void类型的参数输入
   1. [X] 修改hi_ipc_call，支持data=HI_NULL/size=0的调用
	  1) 如果data!=NULL &&size!=0,则是标准调用
	  2) 如果data==NULL || size==0, 则是void类新的调用
   2. [X] IPC支持两种形式的function
	  1) 单参数形式hi_int32 (*f0)(hi_void*)
	  2) 无参数形式hi_int32 (*f1)(hi_void)
   3. [X] 判断可变参数宏的参数数目
   #+BEGIN_ASCII
   #define VA_NARGS_IMPL(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, N, ...) N
   #define VA_NARGS(...) VA_NARGS_IMPL(_, __VA_ARGS__, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)
   #+END_ASCII
6. [X] 支持变长参数
   #+BEGIN_ASCII
   HI_KERNEL_DEF_IPC(hi_kernel_ipc_test_call_0)
   HI_KERNEL_DEF_IPC(hi_kernel_ipc_test_call_1, hi_ssf_ipc_test_data_s*, pst_data)
   HI_KERNEL_DEF_IPC(hi_kernel_ipc_test_call_2, hi_uchar8*, puc_data, ui_size)
   #+END_ASCII
7. [X] 加载kbasic后，立即加载hi_kipc.ko，否则hal和driver等不能加载

*** 其他修改 [2/2]
1. [X] 内核态(HI_CMDTYPE_REGKO) [8/8]
   1) [X] hsan/source/driver/sd511x/diag_chip (陈事斌)
   2) [X] hsan/source/cms/oam (徐勇)
   3) [X] hsan/source/diagnose/hrw (古波)
	  1) 删除使用hi_kernel_unmod_systrace
	  2) 使用hi_kernel_systrace代替
   4) [X] hsan/source/ffs/mulitcast(吴晔晖)
   5) [X] hsan/source/ffs/vif (余波)
   6) [X] hsan/source/hal (陈事斌)
   7) [X] hsan/source/pon_link/mpcp (吴晔晖)
   8) [X] hsan/source/pon_link/ploam (吴晔晖)
2. [X] 用户态(HI_CMDTYPE_REGSO & HI_CMDTYPE_REGAPI) [6/6]
   1. [X] hsan/source/cms/oam (徐勇)
   2. [X] hsan/source/hal (陈事斌)
   3. [X] hsan/source/pon_link/mpcp (吴晔晖)
   4. [X] hsan/source/pon_link/ploam (吴晔晖)
   5. [X] hsan/source/cmd/omci (区伟权)
   6. [X] hsan/source/sml/diag_sml (区伟权)

** DONE 开发LOG [100%]
   CLOSED: [2014-01-10 五 19:15] SCHEDULED: <2014-01-06 四> DEADLINE: <2014-01-07 二>
1. [X] 支持用户态LOG [4/4]
   1) [X] hi_systrace(module, ret, arg1, arg2, arg3, arg4)
   2) [X] hi_debug(module, level, fmt, arg...)
   3) [X] hi_print(module, level, fmt, arg...)
   4) [X] hi_log_memdesc(module, level, data, len, fmt, arg...)
2. [X] 支持内核态LOG [4/4]
   1) [X] hi_kernel_systrace(module, ret, arg1, arg2, arg3, arg4)
   2) [X] hi_kernel_debug(module, level, fmt, arg...)
   3) [X] hi_kernel_print(module, level, fmt, arg...)
   4) [X] hi_kernel_log_memdesc(module, level, data, len, fmt, arg...)
3. [X] 支持使用hi_ipc设置log状态
   1) 支持设置sys,dbg,print状态
   #+BEGIN_ASCII
   hi_ipc /home/cli/apps/log_cmd/set -v module 0xfb002000 sys on/off dbg 0xff print 0xff
   hi_ipc /home/cli/apps/log_cmd/get -v module 0xfb002000
   #+END_ASCII
4. [X] TRACE形式如下
   #+BEGIN_ASCII
   __FUNCTION__
   line-%05u : ret=%08x arg1=%08x arg2=%08x arg3=%08x arg4=%08x
   #+END_ASCII
5. [X] 支持MEM输出
   #+BEGIN_ASCII
   [0x00000000] 00 00 00 00 00 00 00 00    00 00 00 00 00 00 00 00  ........ ........  
   [0x00000010] 00 00 00 00 00 aa bb cc    dd ee ff gg hh ii        ........ ......
   #+END_ASCII

** TODO 开发IPCv2.0 [40%]
   SCHEDULED: <2013-12-18 三> DEADLINE: <2014-01-03 五>
1. [X] 支持内核态模块使用IPC [100%]
   1) [X] 支持内核态IPC
   2) [X] 支持免注册方式，如用户态模块那样定义IPC方法
2. [-] 支持由命令行访问IPC [50%]
   1) [X] 完整阅读hi_cli代码
   2) [X] 支持自动填充PAD
   3) [X] 继承hi_cli的用户界面 [100%]
      #+BEGIN_ASCII
      [settings]
      functionname  = hi_kernel_ipc_test_call_4
	  attributeprev = hi_ipc_test_call_4_0
	  attributenum  = 3;忽略
	  attributeflag = 1

	  [parameter]
	  attribute=alias<uchar8>    type<uchar8>    range<0, 0xff>                default<0>
	  attribute=alias<ushort16>  type<ushort16>  range<0, 65535>	           default<0x1>
	  attribute=alias<uint32>    type<uint32>    range<0, 0xffffffff>          default<2>
      attribute=alias<ulong64>   type<ulog64>    range<0, 0xffffffffffffffff>  default<3>
	  attribute=alias<bool>      type<bool>                                    default<true>
	  attribute=alias<string>    type<string>    range<0,6>                    default<abc>
	  attribute=alias<hex>       type<hex>       range<0,10>                   default<0102030405060708090a>
	  attribute=alias<ipv4>      type<ipv4>                                    default<192.168.0.1>
	  attribute=alias<ipv6>      type<ipv6>                                    default<fc0::1>
	  attribute=alias<mac>       type<mac>                                     default<00:00:00:01:02:03>
	  attribute=alias<color>     type<map>       range<red,green,blue>         default<red>
	  attribute=alias<ipv4>      type<ipv4[2]>	                               default<192.168.0.1,192.168.0.100>
	  ==>(standardize)
	  attribute=alias<ipv4[0]>   type<ipv4>                                    default<192.168.0.100>
	  attribute=alias<ipv4[1]>   type<ipv4>                                    default<192.168.1.100>

	  [help]
	  call hi_ipc_test_call_4
	  #+END_ASCII
	  1) [X] attributenum可以忽略，自动判断参数数目
	  2) [X] attributeflag=1印输出值，=0不打印
	  3) [X] ;后跟注释
	  4) [X] key或value中的空格需要删除
	  5) [X] help没有key=value的形式
	  6) [X] 支持基本数据类型uint, bool, str, hex, ipv4, ipv6, mac, map
	  7) [X] 支持ushort
	  8) [X] 支持uchar和array形式的命令行输入，用以取代hex类型,直接支持HEX类型
	  9) [X] 支持64位的值ulong64
	  10) [X] range中如果出现大于该值所能表示的范围的按照最大范围处理
	  11) [X] 支持ushort16,uint32,ulong64可以有两种形式的值(16进制，10进制)
      12) [X] 支持attributeprev
      13) [X] 支持多个functionname, 具体执行那个可以由命令行指定，或者都执行(不支持)
      #+BEGIN_ASCII
	  hi_cli /home/cli/ffs/vif/add -c 2 -v ifname LAN vlan 100  (call hi_kernel_ipc_test_call_4)
	  hi_cli /heom/cli/ffs/vif/add -v ifname LAN vlan 100       (call hi_ipc_test_call_4)
	  #+END_ASCII
	  1) [X] 支持数组 [100%]
		 1) [X] type后面跟[num]表示数组维数
		 2) [X] default后面使用,将默认值分隔出来
		 3) [X] print形式如下
         #+BEGIN_ASCII
		 ipv4[0] : 192.168.0.1
         ipv4[1] : 192.168.0.100
         #+END_ASCII
		 1) [X] 命令行形式如下
		 #+BEGIN_ASCII
		 hi_cli /home/cli/ffs/vif/add -v ipv4[0] 192.168.1.1 ipv4[1] 192.168.1.100
		 #+END_ASCII
   4) [ ] 支持友好的错误提示
   5) [ ] 支持超时机制,依赖于Netlink实现的IPC
   6) [-] 使用hi_ipc命令 [50%]
	  1) [X] 支持一般的IPC调用
      #+BEGIN_ASCII
      hi_cli /home/cli/ffs/vif/add -v ifname LAN vlan 100
	  hi_cli /home/cli/ffs/vif/add ?
      #+END_ASCII
	  1) [ ] 支持IPC命令行,且可以自动补全
	  #+BEGIN_ASCII
	  hi_ipc
      IPC>> hi_kernel_vif_cmd_add ifname LAN vlan 100
	  IPC>> ...
      #+END_ASCII
3. [ ] 整理目录结构，参考PLOAM
4. [ ] 支持IPC优先级(L)
5. [X] 支持超长数据传输（参考proc的seq机制）（使用Netlink解决）(L) [100%]
   1) [X] 支持分片
   2) [X] 支持重组
6. [ ] 使用netlink实现底层的IPC (H)
   1) [ ] 使用IPC的环境分为3种：Local, Out, Kernel
   2) [ ] Local->Local(one process, two process)
   3) [ ] Local->Kernel
   4) [ ] Out->Local
   5) [ ] Out->Kernel
   6) [ ] Kernel->Local
7. [ ] 解决NT_CALL中调用IPC_CALL引起阻塞的问题
8. [X] 支持空参数的IPC和SCRIPT
9. [X] 支持内核态加速查找表 [100%]
   1. [X] 通过关注module_notify_list通知链来实现
   2. [X] 更改IPC的修饰方法=> HI_IPC_xxx，避免__ipc_db_module_notify识别不准确
10. [ ] 增加__vtype_read_str的长度检查

** TODO 开发UCMv2.0 [14%]
   SCHEDULED: <2014-01-08 三> DEADLINE: <2014-01-15 三>
1. [ ] 支持简便的申明MDT的方法
   1) [ ] 将offset,size,num合并为一个组
   2) [ ] 将ast_mdt,ui_mdt_num合并为一组
2. [ ] 支持UCM命令行
   1) [ ] 支持自动补全
   2) [ ] 支持多行
3. [ ] 支持MDT_WALKER，用于遍历MDT(L)
4. [ ] 支持超长配置项(L)
5. [ ] 支持DUMP命令(依赖于hi_ipc)
6. [ ] 支持KEY类型
7. [ ] 支持配置文件加密，校验
8. [ ] 支持权限管理(L)
9. [ ] 支持多次REG/UNREG MDT
   1) reg(NULL, mdt): 注册一个根MDT
   2) reg("uif.db", mdt): 向uif.db注册一个mdt
   3) 对uif有用
10. [ ] 支持层次化start/stop
11. [ ] 支持hi_ucm对配置文件直接操作
	1) 用于在系统启动前对修改配置文件
	2) 这是对配置文件的配置操作，用于实现多种版本的灵活切换
12. [ ] 去除UCM名称与应用名称绑定的限制
13. [X] 添加hi_ucm_add/hi_ucm_del/hi_ucm_update的测试用例
14. [X] 添加hi_ucm_set方法及测试用例(不需要)

** TODO 开发APPMv2.0 [0%]
   SCHEDULED: <2014-01-16 四> DEADLINE: <2014-01-20 一>
1. [ ] 支持应用core dump后，还能重启
2. [ ] 增加monitor功能，当某个应用异常退出后，可以：
   1) [ ] 清理残余公共资源
   2) [ ] 重启该应用
   3) [ ] 通过捕获SIGCHLD信号来实现
3. [ ] 支持APP_POST_INIT失败后的回滚操作
4. [ ] 支持动态关闭、打开某个应用，如insmod那样的模式
5. [ ] 支持更具意义的错误提示
6. [ ] 使用hi_ipc替代hi_appm_ctrl

** TODO 开发杂项 [10%]
   SCHEDULED: <2014-01-21 二> DEADLINE: <2014-01-24 五>
1. [ ] 整理头文件包含
2. [ ] 完善错误提示
3. [X] 创建util的单元测试用例
4. [ ] 优化HI_UTIL_TRACE
5. [ ] 对外提供hi_void*类型的变量取代hi_uchar8*
6. [ ] 支持对外提供的API参数合法性检查
7. [ ] 支持ecall内部对so的合法性检查
   1) 必须是so类型(hdr->s_type = EY_DYN)
   2) .strtab类型必须是SHT_STRTAB
   3) .symtab类型必须是SHT_SYMTAB
8. [ ] 修正sem_del可能多次调用的
9. [ ] 修正VIF中HASH_DEL的问题
10. [ ] 支持应用程序使用SSF提供的服务
11. [ ] 调整LD_LIBRARY_PATH中的顺序

** TODO 开发readline库[0%]
1. [ ] 功能定义
   1. 读取用户输入的一行
   2. 过程中输入某个字符的反应
   |-------------+----------------|
   | input       | act            |
   |-------------+----------------|
   | 可见字符    | 输出该字符     |
   | TAB         | 自动补全       |
   | BACKSPACE   | 删除前一个字符 |
   | C-BACKSPACE | 删除前一个单词 |
   | delete,C-d  | 删除后一个字符 |
   | M-d         | 删除后一个单词 |
   | <up>,C-p    | 前一条命令     |
   | <down>,C-n  | 后一条命令     |
   | <left>,C-b  | 前一个字符     |
   | <right>,C-f | 后一个字符     |
   | C-a         | 行首           |
   | C-e         | 行尾           |
   | C-k         | 删除整行       |
   | C-d         | 退出           |
   | C-l         | 清屏           |
   | Enter       | 执行           |
   |-------------+----------------|
2. [ ] 基本问题 [0%]
   1. [ ] 进入RAW-MODE
   2. [ ] 识别各种输入
   3. [ ] 定义struct line
   4. [ ] 如何删除字符
   5. [ ] 如何显示字符
   6. [ ] 如何移动光标
3. [ ] 自动补全问题 [0%]
   1. [ ] 由用户提供complete函数，
   2. [ ] 函数中有两个参数line(INPUT), complete(OUTPUT)
      1. line中含有目前为止的输入
      2. complete为可能的补全单词
   3. [ ] 补全输出形式
	  1. 唯一匹配：输出匹配后的line
	  2. 多值匹配：输出匹配单词，输出原来的输入值
   
** TODO 其它[0%]
1. [ ] sysinfo参数补充
   sysinfo最好能提供的参数
   ONU vendorID      ONU厂商     4字节
   ONU Model         ONU型号     4字节
   hardware version  硬件版本    最多8字节
   firmware version  固件版本    无限制 
   chip vendorID     芯片厂商     2字节
   chip model        芯片型号     2字节
   chip revision     芯片修订情况 1字节
   IC_version/Date   芯片版本     3字节
2. [ ] 根据不同形态提供不同配置脚本，以及优化脚本数目
3. [ ] mms/board不应该包含SDK的头文件（内核态），迁移到HAL上
4. [-] hi_ipc需求
   1. [X] 优化输出信息
	  1. [X] 支持简单的脚本和参数错误输出
	  2. [X] 支持丰富的错误提示
   2. [-] 支持int,char,short,long类型
	  1. [X] 支持int类型
	  2. [ ] 支持所有有符号类型
   3. [X] 支持方便的输入变长类型的参数，如报文，支持可变长的hex

** DONE SSF需求 [4/4]
   CLOSED: [2014-03-07 五 11:06]
1. [X] hi_appm成功的信息不显示，只显示错误信息，或者用启动参数控制是否显示。
   1. hi_appm [-v]：启动信息开关
2. [X] 5116方案首批导入的仍然是双S客户，交付模式上看样子变化不大，导入周期会变得比较短，
   大概3~4个月产品上市。5116方案上我们增加了不少内容，需要考虑几个问题，
   1. [X] 如果交付模式上仍然是 BSP+SDK+SSF（basic）+HAL+部分业务功能（例如FFWD、组播、虚驱动），这   几部分是否能拆离出来？
      1. 内核态没有影响。
      2. 用户态如果不需要appm提供的组件，可以单独作为动态库交付。
   2. [X] 如果客户不需要使用hi_appm，是否可以不交付，不影响其他交付件的使用？
	  1 可以不交付，如果启动交付件不使用appm提供的组件即可。
   3. [X] SSF的配置文件管理、启动GPON/EPON、命令行框架等功能之间是否可以解耦，
      彼此可以独立启动运行？
	  1 启动什么应用完全有配置文件决定
3. [X] xpon初始化与命令行生效强相关
   1. 要使内核态的IPC生效只需要插入hi_kipc.ko即可。
   2. 用户态的IPC生效，必须启动appm，可以不启动xpon，启动什么应用完全由配置文件决定。
4. [X] 命令行错误返回信息过于简单，不方便定位
   1. 将IPC调用失败的情况限制在公共函数上
   2. 确定如下三种返回形式
      |-----------------------------+-------------|
      | 形式                        | 含义        |
      |-----------------------------+-------------|
      | succ.                       | 调用成功    |
      | fail.(retcode = 0xXXXXXXXX) | 调用失败    |
      | error.(......)              | IPC执行出错 |
      |-----------------------------+-------------|
